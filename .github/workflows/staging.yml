name: üöÄ Staging Deployment Pipeline - AWS Ready

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: dromic-staging
  ECS_SERVICE: dromic-staging-service
  ECS_CLUSTER: dromic-staging
  CONTAINER_NAME: dromic-app
  
jobs:
  # ============================================================================
  # üîç Code Quality & Security Checks
  # ============================================================================
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: üîé Run ESLint
        run: npm run lint
        
      - name: üîß TypeScript Type Check
        run: npm run type-check
        
      - name: üìä Format Check
        run: npm run format:check
        continue-on-error: true

  # ============================================================================
  # üß™ Testing Suite
  # ============================================================================
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: üß™ Run Tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          
      - name: üìä Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-type }}
          name: coverage-${{ matrix.test-type }}

  # ============================================================================
  # üèóÔ∏è Build Application
  # ============================================================================
  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: üèóÔ∏è Build for Staging
        run: npm run build:staging
        env:
          NODE_ENV: staging
          NEXT_PUBLIC_ENV: staging
          
      - name: üìÅ Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: staging-build
          path: |
            .next/
            public/
            package.json
          retention-days: 7

  # ============================================================================
  # üöÄ Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üìÅ Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: staging-build
          
      - name: üöÄ Deploy to Staging Server
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "üìä Build completed successfully"
          echo "üîó Staging URL: https://staging.dromic-is.dswd.gov.ph"
          # TODO: Add actual deployment commands here
          # Example deployment commands:
          # rsync -avz --delete ./ staging-server:/var/www/dromic-is/
          # ssh staging-server 'cd /var/www/dromic-is && pm2 restart dromic-is-staging'
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
          
      - name: üîç Health Check
        run: |
          echo "üîç Running post-deployment health checks..."
          # TODO: Add health check commands
          # curl -f https://staging.dromic-is.dswd.gov.ph/api/health
          
      - name: üìß Notify Deployment
        run: |
          echo "üìß Deployment notification sent"
          echo "‚úÖ Staging deployment completed successfully"

  # ============================================================================
  # üîí Security Scan
  # ============================================================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üîí Run Security Audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: üõ°Ô∏è Check Dependencies
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  # ============================================================================
  # üìä Performance Monitoring
  # ============================================================================
  performance:
    name: üìä Performance Check
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üìä Bundle Size Analysis
        run: |
          echo "üìä Analyzing bundle size..."
          # TODO: Add bundle size analysis
          # npm run analyze

  # ============================================================================
  # üìã Summary Report
  # ============================================================================  summary:
    name: üìã Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security, deploy-aws]
    if: always()
    
    steps:
      - name: üìã Generate Summary
        run: |
          echo "## üöÄ DROMIC-IS Staging Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AWS Deployment | ${{ needs.deploy-aws.result == 'success' && '‚úÖ Deployed' || needs.deploy-aws.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed checks above" >> $GITHUB_STEP_SUMMARY
          echo "- Test the staging environment thoroughly" >> $GITHUB_STEP_SUMMARY
          echo "- Prepare for production deployment when ready" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy-aws.result }}" == "success" ]]; then
            echo "- üåê **Staging URL:** https://staging.dromic-is.dswd.gov.ph" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # üöÄ AWS Deployment (Conditional)
  # ============================================================================
  deploy-aws:
    name: üöÄ Deploy to AWS
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.dromic-is.dswd.gov.ph
      
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üîß Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: üèóÔ∏è Build Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image for AWS deployment..."
          docker build \
            --file Dockerfile.staging \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg BUILD_ENV=staging \
            .
            
      - name: üöÄ Push Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: üìã Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-staging.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
      - name: üöÄ Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          
      - name: üè• Health Check
        run: |
          echo "Waiting for deployment to be healthy..."
          sleep 60
          
          # Health check with retry
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f -s https://staging.dromic-is.dswd.gov.ph/api/health > /dev/null; then
              echo "‚úÖ Health check passed!"
              curl -s https://staging.dromic-is.dswd.gov.ph/api/health | jq '.'
              break
            else
              echo "‚ùå Health check failed, retrying in 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "üö® Health check failed after $max_attempts attempts"
            exit 1
          fi
          
      - name: üìä Deployment Summary
        run: |
          echo "## üöÄ AWS Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Staging URL:** https://staging.dromic-is.dswd.gov.ph" >> $GITHUB_STEP_SUMMARY
